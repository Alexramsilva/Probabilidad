# -*- coding: utf-8 -*-
"""Probabilidad_II.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17RBnJWn1rb9vRlKtOhTZGwzWc_j83JVz
"""

import streamlit as st
import scipy.stats as stats
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Calculadora de Probabilidades (UCA Probabilidad)", page_icon="UNRC", layout="centered")

st.image("UNRC.png", caption="Universidad Nacional Rosario Castellanos", width=300)

st.title("Calculadora de Distribuciones de Probabilidad  (UNRC-LCFI)")
st.markdown("Selecciona una distribución y calcula probabilidades o valores críticos con su área marcada en el gráfico.")

# Selección de distribución
dist = st.selectbox(
    "Selecciona la distribución:",
    [
        "Bernoulli",
        "Binomial",
        "Poisson",
        "Normal",
        "t-Student",
        "Chi-cuadrada",
        "F de Fisher"
    ]
)

st.divider()

# Funciones para cada distribución
if dist == "Bernoulli":
    p = st.number_input("Probabilidad de éxito (p)", min_value=0.0, max_value=1.0, value=0.5)
    x = st.selectbox("Valor de X", [0, 1])
    prob = stats.bernoulli.pmf(x, p)
    st.write(f"**P(X={x}) = {prob:.4f}**")

    # Gráfico
    fig, ax = plt.subplots()
    xs = [0, 1]
    ys = stats.bernoulli.pmf(xs, p)
    ax.bar(xs, ys, color=['lightgray', 'lightgray'])
    ax.bar([x], [prob], color='#9F2241')
    ax.set_xticks([0, 1])
    ax.set_title(f"Distribución Bernoulli (p={p})")
    st.pyplot(fig)

    st.latex(r"P(X=x) = p^x (1-p)^{1-x}, \quad x \in \{0,1\}")


elif dist == "Binomial":
    n = st.number_input("Número de ensayos (n)", min_value=1, value=10)
    p = st.number_input("Probabilidad de éxito (p)", min_value=0.0, max_value=1.0, value=0.5)
    x = st.number_input("Número de éxitos (x)", min_value=0, max_value=int(n), value=5)
    tipo = st.radio("Tipo de cálculo", ["P(X = x)", "P(X ≤ x)", "P(X ≥ x)"])

    if tipo == "P(X = x)":
        prob = stats.binom.pmf(x, n, p)
    elif tipo == "P(X ≤ x)":
        prob = stats.binom.cdf(x, n, p)
    else:
        prob = 1 - stats.binom.cdf(x-1, n, p)
    st.write(f"**{tipo} = {prob:.4f}**")

    # Gráfico
    xs = np.arange(0, n+1)
    ys = stats.binom.pmf(xs, n, p)
    fig, ax = plt.subplots()
    ax.bar(xs, ys, color='lightgray')
    if tipo == "P(X = x)":
        ax.bar([x], [stats.binom.pmf(x, n, p)], color='#9F2241')
    elif tipo == "P(X ≤ x)":
        ax.bar(xs[xs <= x], ys[xs <= x], color='#9F2241')
    else:
        ax.bar(xs[xs >= x], ys[xs >= x], color='#9F2241')
    ax.set_title(f"Distribución Binomial (n={n}, p={p})")
    st.pyplot(fig)
    st.latex(r"P(X=x) = \binom{n}{x} p^x (1-p)^{n-x}, \quad x=0,1,\dots,n")

elif dist == "Poisson":
    mu = st.number_input("Media (λ)", min_value=0.0, value=2.0)
    x = st.number_input("Número de eventos (x)", min_value=0, value=3)
    tipo = st.radio("Tipo de cálculo", ["P(X = x)", "P(X ≤ x)", "P(X ≥ x)"])

    if tipo == "P(X = x)":
        prob = stats.poisson.pmf(x, mu)
    elif tipo == "P(X ≤ x)":
        prob = stats.poisson.cdf(x, mu)
    else:
        prob = 1 - stats.poisson.cdf(x-1, mu)
    st.write(f"**{tipo} = {prob:.4f}**")

    # Gráfico
    xs = np.arange(0, int(mu*4)+1)
    ys = stats.poisson.pmf(xs, mu)
    fig, ax = plt.subplots()
    ax.bar(xs, ys, color='lightgray')
    if tipo == "P(X = x)":
        ax.bar([x], [stats.poisson.pmf(x, mu)], color='#9F2241')
    elif tipo == "P(X ≤ x)":
        ax.bar(xs[xs <= x], ys[xs <= x], color='#9F2241')
    else:
        ax.bar(xs[xs >= x], ys[xs >= x], color='#9F2241')
    ax.set_title(f"Distribución Poisson (λ={mu})")
    st.pyplot(fig)
    st.latex(r"P(X=x) = \frac{e^{-\lambda}\lambda^x}{x!}, \quad x = 0,1,2,\dots")


elif dist == "Normal":
    mu = st.number_input("Media (μ)", value=0.0)
    sigma = st.number_input("Desviación estándar (σ)", min_value=0.0001, value=1.0)
    x = st.number_input("Valor de X", value=0.0)
    tipo = st.radio("Tipo de cálculo", ["P(X ≤ x)", "P(X ≥ x)"])

    if tipo == "P(X ≤ x)":
        prob = stats.norm.cdf(x, mu, sigma)
    else:
        prob = 1 - stats.norm.cdf(x, mu, sigma)
    st.write(f"**{tipo} = {prob:.4f}**")

    # Gráfico
    xs = np.linspace(mu - 4*sigma, mu + 4*sigma, 500)
    ys = stats.norm.pdf(xs, mu, sigma)
    fig, ax = plt.subplots()
    ax.plot(xs, ys, color='black')
    if tipo == "P(X ≤ x)":
        ax.fill_between(xs, 0, ys, where=(xs <= x), color='#9F2241')
    else:
        ax.fill_between(xs, 0, ys, where=(xs >= x), color='#9F2241')
    ax.set_title(f"Distribución Normal (μ={mu}, σ={sigma})")
    st.pyplot(fig)

    st.latex(r"f(x) = \frac{1}{\sqrt{2\pi\sigma^2}} e^{ -\frac{(x - \mu)^2}{2\sigma^2} }")


elif dist == "t-Student":
    gl = st.number_input("Grados de libertad (ν)", min_value=1, value=10)
    t = st.number_input("Valor t", value=1.5)
    tipo = st.radio("Tipo de cálculo", ["P(T ≤ t)", "P(T ≥ t)"])

    if tipo == "P(T ≤ t)":
        prob = stats.t.cdf(t, gl)
    else:
        prob = 1 - stats.t.cdf(t, gl)
    st.write(f"**{tipo} = {prob:.4f}**")

    xs = np.linspace(-4, 4, 500)
    ys = stats.t.pdf(xs, gl)
    fig, ax = plt.subplots()
    ax.plot(xs, ys, color='black')
    if tipo == "P(T ≤ t)":
        ax.fill_between(xs, 0, ys, where=(xs <= t), color='#9F2241')
    else:
        ax.fill_between(xs, 0, ys, where=(xs >= t), color='#9F2241')
    ax.set_title(f"Distribución t-Student (ν={gl})")
    st.pyplot(fig)

    st.latex(r"f(t) = \frac{\Gamma\left(\frac{\nu+1}{2}\right)}{\sqrt{\nu\pi}\Gamma\left(\frac{\nu}{2}\right)} \left(1 + \frac{t^2}{\nu}\right)^{-\frac{\nu+1}{2}}")


elif dist == "Chi-cuadrada":
    gl = st.number_input("Grados de libertad (ν)", min_value=1, value=5)
    x = st.number_input("Valor de X²", value=3.0)
    tipo = st.radio("Tipo de cálculo", ["P(X² ≤ x)", "P(X² ≥ x)"])

    if tipo == "P(X² ≤ x)":
        prob = stats.chi2.cdf(x, gl)
    else:
        prob = 1 - stats.chi2.cdf(x, gl)
    st.write(f"**{tipo} = {prob:.4f}**")

    xs = np.linspace(0, 30, 500)
    ys = stats.chi2.pdf(xs, gl)
    fig, ax = plt.subplots()
    ax.plot(xs, ys, color='black')
    if tipo == "P(X² ≤ x)":
        ax.fill_between(xs, 0, ys, where=(xs <= x), color='#9F2241')
    else:
        ax.fill_between(xs, 0, ys, where=(xs >= x), color='#9F2241')
    ax.set_title(f"Distribución Chi-cuadrada (ν={gl})")
    st.pyplot(fig)

    st.latex(r"f(x) = \frac{1}{2^{\nu/2}\Gamma(\nu/2)} x^{\frac{\nu}{2}-1} e^{-x/2}, \quad x > 0")


elif dist == "F de Fisher":
    gl1 = st.number_input("Grados de libertad del numerador (d1)", min_value=1, value=5)
    gl2 = st.number_input("Grados de libertad del denominador (d2)", min_value=1, value=10)
    f = st.number_input("Valor F", value=2.0)
    tipo = st.radio("Tipo de cálculo", ["P(F ≤ f)", "P(F ≥ f)"])

    if tipo == "P(F ≤ f)":
        prob = stats.f.cdf(f, gl1, gl2)
    else:
        prob = 1 - stats.f.cdf(f, gl1, gl2)
    st.write(f"**{tipo} = {prob:.4f}**")

    xs = np.linspace(0, 5, 500)
    ys = stats.f.pdf(xs, gl1, gl2)
    fig, ax = plt.subplots()
    ax.plot(xs, ys, color='black')
    if tipo == "P(F ≤ f)":
        ax.fill_between(xs, 0, ys, where=(xs <= f), color='#9F2241')
    else:
        ax.fill_between(xs, 0, ys, where=(xs >= f), color='#9F2241')
    ax.set_title(f"Distribución F de Fisher (d1={gl1}, d2={gl2})")
    st.pyplot(fig)

    st.latex(r"f(x) = \frac{\Gamma\left(\frac{d_1 + d_2}{2}\right)}{\Gamma\left(\frac{d_1}{2}\right)\Gamma\left(\frac{d_2}{2}\right)} \left(\frac{d_1}{d_2}\right)^{d_1/2} \frac{x^{d_1/2 - 1}}{(1 + \frac{d_1x}{d_2})^{(d_1 + d_2)/2}}, \quad x > 0")


st.divider()
st.caption("Calculadora de distribuciones estadísticas  UNRC_LCFI (UCA Probabilidad)")